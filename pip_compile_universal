#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pathlib import Path
import argparse
import os
import subprocess


def parse_versions(versions):
	if not versions:
		raise argparse.ArgumentTypeError("Missing versions attribute")
	parsed_versions = []
	versions = versions.split(',')
	for version in versions:
		try:
			parsed_versions.append(tuple(int(num) for num in version.split('.')))
		except ValueError:
			raise argparse.ArgumentTypeError("Bad version format: %s" % version)
	return sorted(parsed_versions)


def get_output_and_args(compile_args):
	compile_args = compile_args[:]
	output_filename = 'requirements.txt'

	out_arg_idx = None
	try:
		out_arg_idx = compile_args.index('-o')
	except ValueError:
		pass
	if out_arg_idx:
		if out_arg_idx < len(compile_args) - 1:
			output_filename = compile_args[out_arg_idx + 1]
			compile_args[out_arg_idx + 1] = '-'
		else:
			compile_args.pop()
			out_arg_idx = None

	if out_arg_idx is None:
		compile_args.extend(['-o', '-'])

	return output_filename, compile_args


def ensure_venv_exists(version_name, virtualenvs_dir):
	virtualenv_dir = virtualenvs_dir / f'py{version_name}'
	if not virtualenv_dir.exists():
		process_args = [f'python{version_name}', '-m', 'venv', str(virtualenv_dir)]
		proc = subprocess.Popen(process_args, preexec_fn=os.setpgrp)
		subprocess.call
		proc.wait()
		if proc.returncode:
			raise subprocess.CalledProcessError(proc.returncode, ' '.join(process_args))


def pip_compile(versions, compile_args, virtualenvs_dir):
	output_filename, compile_args = get_output_and_args(compile_args)
	for version in versions:
		version_name = ".".join(str(v) for v in version)
		virtualenv_dir = virtualenvs_dir / f'py{version_name}'
		ensure_venv_exists(version_name, virtualenvs_dir)

	print(output_filename, compile_args)


def main():
	parser = argparse.ArgumentParser(description="Compile requirements.in to single requirements.txt file with multiple python versions support")
	parser.add_argument('versions', type=parse_versions, help="Comma separated list of pythoon versions")
	parser.add_argument('--virtualenvs_dir', default=str(Path.home() / '.virtualenvs'), help="Where to create virtualenvs")
	parser.add_argument('pip_compile_args', nargs=argparse.REMAINDER, help="Arguments forwarded to pip-tools")
	args = parser.parse_args()
	pip_compile(args.versions, args.pip_compile_args, Path(args.virtualenvs_dir))


if __name__ == "__main__":
	main()
